/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.HotelapiApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This api allows clients to use Alice&#39;s guest functionality such as creating reservations and send requests to the hotel.
 * Version: 1.0.0
 * Generated at: 2016-03-29T13:24:53.887Z
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Aliceapp REST API public license
 * http://info.aliceapp.com
 */

goog.provide('API.Client.HotelapiApi');

goog.require('API.Client.Error');
goog.require('API.Client.Facility');
goog.require('API.Client.Hotel');
goog.require('API.Client.HotelFull');
goog.require('API.Client.Menu');
goog.require('API.Client.MenuItem');
goog.require('API.Client.MenuItemOption');
goog.require('API.Client.Service');
goog.require('API.Client.ServiceOption');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.HotelapiApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('HotelapiApiBasePath') ?
                   /** @type {!string} */ ($injector.get('HotelapiApiBasePath')) :
                   'https://rapi.aliceapp.com/';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('HotelapiApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('HotelapiApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @private {!Object} */
  this.httpParamSerializer_ = $injector.get('$httpParamSerializer');
}
API.Client.HotelapiApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Hotel facilities
 * List of facilities that the hotel has
 * @param {!number} hotelId Example: 6
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Facility>>}
 */
API.Client.HotelapiApi.prototype.facilitiesUsingGET = function(hotelId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{hotelId}/facilities'
      .replace('{' + 'hotelId' + '}', String(hotelId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'hotelId' is set
  if (!hotelId) {
    throw new Error('Missing required parameter hotelId when calling facilitiesUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}

/**
 * Hotel facility
 * Info about facility
 * @param {!number} hotelId Example: 6
 * @param {!number} id Example: 24
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Facility>}
 */
API.Client.HotelapiApi.prototype.facilityUsingGET = function(hotelId, id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{hotelId}/facilities/{id}'
      .replace('{' + 'hotelId' + '}', String(hotelId))
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'hotelId' is set
  if (!hotelId) {
    throw new Error('Missing required parameter hotelId when calling facilityUsingGET');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling facilityUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}

/**
 * Menu item options
 * Menu item options
 * @param {!number} hotelId Example: 6
 * @param {!number} facilityId Example: 24
 * @param {!number} menuId Example: 88
 * @param {!number} id Example: 799
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.MenuItemOption>>}
 */
API.Client.HotelapiApi.prototype.itemOptionsUsingGET = function(hotelId, facilityId, menuId, id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{hotelId}/facilities/{facilityId}/menus/{menuId}/items/{id}/options'
      .replace('{' + 'hotelId' + '}', String(hotelId))
      .replace('{' + 'facilityId' + '}', String(facilityId))
      .replace('{' + 'menuId' + '}', String(menuId))
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'hotelId' is set
  if (!hotelId) {
    throw new Error('Missing required parameter hotelId when calling itemOptionsUsingGET');
  }
  // verify required parameter 'facilityId' is set
  if (!facilityId) {
    throw new Error('Missing required parameter facilityId when calling itemOptionsUsingGET');
  }
  // verify required parameter 'menuId' is set
  if (!menuId) {
    throw new Error('Missing required parameter menuId when calling itemOptionsUsingGET');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling itemOptionsUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}

/**
 * Menu info
 * Menu info
 * @param {!number} hotelId Example: 6
 * @param {!number} facilityId Example: 24
 * @param {!number} menuId Example: 88
 * @param {!number} id Example: 799
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MenuItem>}
 */
API.Client.HotelapiApi.prototype.itemUsingGET = function(hotelId, facilityId, menuId, id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{hotelId}/facilities/{facilityId}/menus/{menuId}/items/{id}'
      .replace('{' + 'hotelId' + '}', String(hotelId))
      .replace('{' + 'facilityId' + '}', String(facilityId))
      .replace('{' + 'menuId' + '}', String(menuId))
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'hotelId' is set
  if (!hotelId) {
    throw new Error('Missing required parameter hotelId when calling itemUsingGET');
  }
  // verify required parameter 'facilityId' is set
  if (!facilityId) {
    throw new Error('Missing required parameter facilityId when calling itemUsingGET');
  }
  // verify required parameter 'menuId' is set
  if (!menuId) {
    throw new Error('Missing required parameter menuId when calling itemUsingGET');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling itemUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}

/**
 * Menu info
 * Menu info
 * @param {!number} hotelId Example: 6
 * @param {!number} facilityId Example: 24
 * @param {!number} menuId Example: 88
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.MenuItem>>}
 */
API.Client.HotelapiApi.prototype.itemsUsingGET = function(hotelId, facilityId, menuId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{hotelId}/facilities/{facilityId}/menus/{menuId}/items'
      .replace('{' + 'hotelId' + '}', String(hotelId))
      .replace('{' + 'facilityId' + '}', String(facilityId))
      .replace('{' + 'menuId' + '}', String(menuId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'hotelId' is set
  if (!hotelId) {
    throw new Error('Missing required parameter hotelId when calling itemsUsingGET');
  }
  // verify required parameter 'facilityId' is set
  if (!facilityId) {
    throw new Error('Missing required parameter facilityId when calling itemsUsingGET');
  }
  // verify required parameter 'menuId' is set
  if (!menuId) {
    throw new Error('Missing required parameter menuId when calling itemsUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}

/**
 * Menu info
 * Menu info
 * @param {!number} hotelId Example: 6
 * @param {!number} facilityId Example: 24
 * @param {!number} id Example: 88
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Menu>}
 */
API.Client.HotelapiApi.prototype.menuUsingGET = function(hotelId, facilityId, id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{hotelId}/facilities/{facilityId}/menus/{id}'
      .replace('{' + 'hotelId' + '}', String(hotelId))
      .replace('{' + 'facilityId' + '}', String(facilityId))
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'hotelId' is set
  if (!hotelId) {
    throw new Error('Missing required parameter hotelId when calling menuUsingGET');
  }
  // verify required parameter 'facilityId' is set
  if (!facilityId) {
    throw new Error('Missing required parameter facilityId when calling menuUsingGET');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling menuUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}

/**
 * Menus list
 * Menus list
 * @param {!number} hotelId Example: 6
 * @param {!number} facilityId Example: 24
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Menu>>}
 */
API.Client.HotelapiApi.prototype.menusUsingGET = function(hotelId, facilityId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{hotelId}/facilities/{facilityId}/menus'
      .replace('{' + 'hotelId' + '}', String(hotelId))
      .replace('{' + 'facilityId' + '}', String(facilityId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'hotelId' is set
  if (!hotelId) {
    throw new Error('Missing required parameter hotelId when calling menusUsingGET');
  }
  // verify required parameter 'facilityId' is set
  if (!facilityId) {
    throw new Error('Missing required parameter facilityId when calling menusUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}

/**
 * Search for a hotel
 * Find nearest hotels by coordinates or name
 * @param {!number=} opt_lat Example: 40.7141667
 * @param {!number=} opt_lng Example: -74.0063889
 * @param {!string=} opt_query Example: Demo
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Hotel>>}
 */
API.Client.HotelapiApi.prototype.searchUsingGET = function(opt_lat, opt_lng, opt_query, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  if (opt_lat !== undefined) {
    queryParameters['lat'] = opt_lat;
  }

  if (opt_lng !== undefined) {
    queryParameters['lng'] = opt_lng;
  }

  if (opt_query !== undefined) {
    queryParameters['query'] = opt_query;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}

/**
 * Service info
 * Service info
 * @param {!number} hotelId Example: 6
 * @param {!number} facilityId Example: 24
 * @param {!number} id Example: 100
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.ServiceOption>>}
 */
API.Client.HotelapiApi.prototype.serviceOptionsUsingGET = function(hotelId, facilityId, id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{hotelId}/facilities/{facilityId}/services/{id}/options'
      .replace('{' + 'hotelId' + '}', String(hotelId))
      .replace('{' + 'facilityId' + '}', String(facilityId))
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'hotelId' is set
  if (!hotelId) {
    throw new Error('Missing required parameter hotelId when calling serviceOptionsUsingGET');
  }
  // verify required parameter 'facilityId' is set
  if (!facilityId) {
    throw new Error('Missing required parameter facilityId when calling serviceOptionsUsingGET');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling serviceOptionsUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}

/**
 * Service info
 * Service info
 * @param {!number} hotelId Example: 6
 * @param {!number} facilityId Example: 24
 * @param {!number} id Example: 100
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Service>}
 */
API.Client.HotelapiApi.prototype.serviceUsingGET = function(hotelId, facilityId, id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{hotelId}/facilities/{facilityId}/services/{id}'
      .replace('{' + 'hotelId' + '}', String(hotelId))
      .replace('{' + 'facilityId' + '}', String(facilityId))
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'hotelId' is set
  if (!hotelId) {
    throw new Error('Missing required parameter hotelId when calling serviceUsingGET');
  }
  // verify required parameter 'facilityId' is set
  if (!facilityId) {
    throw new Error('Missing required parameter facilityId when calling serviceUsingGET');
  }
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling serviceUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}

/**
 * Facility services
 * List of all services in facility
 * @param {!number} hotelId Example: 6
 * @param {!number} facilityId Example: 24
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Service>>}
 */
API.Client.HotelapiApi.prototype.servicesUsingGET = function(hotelId, facilityId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{hotelId}/facilities/{facilityId}/services'
      .replace('{' + 'hotelId' + '}', String(hotelId))
      .replace('{' + 'facilityId' + '}', String(facilityId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'hotelId' is set
  if (!hotelId) {
    throw new Error('Missing required parameter hotelId when calling servicesUsingGET');
  }
  // verify required parameter 'facilityId' is set
  if (!facilityId) {
    throw new Error('Missing required parameter facilityId when calling servicesUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}

/**
 * Full hotel info
 * Full hotel info with all dependencies
 * @param {!number} id Example: 6
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.HotelFull>}
 */
API.Client.HotelapiApi.prototype.showFullUsingGET = function(id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{id}/full'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling showFullUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}

/**
 * Hotel info
 * Get info about hotel
 * @param {!number} id Example: 6
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Hotel>}
 */
API.Client.HotelapiApi.prototype.showUsingGET = function(id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling showUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}
