/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.ReservationapiApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This api allows clients to use Alice&#39;s guest functionality such as creating reservations and send requests to the hotel.
 * Version: 1.0.0
 * Generated at: 2016-03-29T13:24:53.887Z
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Aliceapp REST API public license
 * http://info.aliceapp.com
 */

goog.provide('API.Client.ReservationapiApi');

goog.require('API.Client.Error');
goog.require('API.Client.Reservation');
goog.require('API.Client.ReservationRequest');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.ReservationapiApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('ReservationapiApiBasePath') ?
                   /** @type {!string} */ ($injector.get('ReservationapiApiBasePath')) :
                   'http://rapi.aliceapp.com/';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('ReservationapiApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('ReservationapiApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @private {!Object} */
  this.httpParamSerializer_ = $injector.get('$httpParamSerializer');
}
API.Client.ReservationapiApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Reservation info
 * Get summary of your reservation
 * @param {!number} hotelId Example: 6
 * @param {!string} uuid Exapmle: 805830df-a550-46c0-85fc-2256f8d5a55f
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Reservation>}
 */
API.Client.ReservationapiApi.prototype.reservationGetUsingGET = function(hotelId, uuid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{hotelId}/reservations/{uuid}'
      .replace('{' + 'hotelId' + '}', String(hotelId))
      .replace('{' + 'uuid' + '}', String(uuid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'hotelId' is set
  if (!hotelId) {
    throw new Error('Missing required parameter hotelId when calling reservationGetUsingGET');
  }
  // verify required parameter 'uuid' is set
  if (!uuid) {
    throw new Error('Missing required parameter uuid when calling reservationGetUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}

/**
 * Make reservation
 * Room or reservationNumber is required to make a reservation.
 * @param {!number} id Example: 6
 * @param {!ReservationRequest} request request
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Reservation>}
 */
API.Client.ReservationapiApi.prototype.reservationUsingPOST = function(id, request, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/hotels/{id}/reservations'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling reservationUsingPOST');
  }
  // verify required parameter 'request' is set
  if (!request) {
    throw new Error('Missing required parameter request when calling reservationUsingPOST');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: request,
    
    
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return this.http_(httpRequestParams);
}
